/*
 * SOC common registers and helper function/macro definitions
 *
 * Copyright (C) 2016 Piotr Dymacz <piotr@dymacz.pl>
 *
 * SPDX-License-Identifier: GPL-2.0
 */

#ifndef _QCA953X_LS_UART_H_
#define _QCA953X_LS_UART_H_

/*
 * Low-Speed UART registers
 */
#define QCA_LSUART_RBR_REG	QCA_LSUART_BASE_REG + 0x00
#define QCA_LSUART_THR_REG	QCA_LSUART_BASE_REG + 0x00
#define QCA_LSUART_DLL_REG	QCA_LSUART_BASE_REG + 0x00
#define QCA_LSUART_DLH_REG	QCA_LSUART_BASE_REG + 0x04
#define QCA_LSUART_IER_REG	QCA_LSUART_BASE_REG + 0x04
#define QCA_LSUART_IIR_REG	QCA_LSUART_BASE_REG + 0x08
#define QCA_LSUART_FCR_REG	QCA_LSUART_BASE_REG + 0x08
#define QCA_LSUART_LCR_REG	QCA_LSUART_BASE_REG + 0x0C
#define QCA_LSUART_MCR_REG	QCA_LSUART_BASE_REG + 0x10
#define QCA_LSUART_LSR_REG	QCA_LSUART_BASE_REG + 0x14
#define QCA_LSUART_MSR_REG	QCA_LSUART_BASE_REG + 0x18

/*
 * Low-Speed UART registers BIT fields
 */

/* RBR register (Receive buffer) */
#define QCA_LSUART_RBR_RBR_SHIFT	0
#define QCA_LSUART_RBR_RBR_MASK		BITS(QCA_LSUART_RBR_RBR_SHIFT, 8)

/* THR register (Transmit holding) */
#define QCA_LSUART_THR_THR_SHIFT	0
#define QCA_LSUART_THR_THR_MASK		BITS(QCA_LSUART_THR_THR_SHIFT, 8)

/* DLL register (Divisor latch low) */
#define QCA_LSUART_DLL_DLL_SHIFT	0
#define QCA_LSUART_DLL_DLL_MASK		BITS(QCA_LSUART_DLL_DLL_SHIFT, 8)

/* DLH register (Divisor latch high) */
#define QCA_LSUART_DLH_DLH_SHIFT	0
#define QCA_LSUART_DLH_DLH_MASK		BITS(QCA_LSUART_DLH_DLH_SHIFT, 8)

/* IER register (Interrupt enable) */
#define QCA_LSUART_IER_ERBFI_SHIFT	0
#define QCA_LSUART_IER_ERBFI_MASK	BIT(QCA_LSUART_IER_ERBFI_SHIFT)
#define QCA_LSUART_IER_ETBEI_SHIFT	1
#define QCA_LSUART_IER_ETBEI_MASK	BIT(QCA_LSUART_IER_ETBEI_SHIFT)
#define QCA_LSUART_IER_ELSI_SHIFT	2
#define QCA_LSUART_IER_ELSI_MASK	BIT(QCA_LSUART_IER_ELSI_SHIFT)
#define QCA_LSUART_IER_EDDSI_SHIFT	3
#define QCA_LSUART_IER_EDDSI_MASK	BIT(QCA_LSUART_IER_EDDSI_SHIFT)

/* IIR register (Interrupt identity) */
#define QCA_LSUART_IIR_IID_SHIFT		0
#define QCA_LSUART_IIR_IID_MASK			BITS(QCA_LSUART_IIR_IID_SHIFT, 4)
#define QCA_LSUART_IIR_FIFO_STATUS_SHIFT	6
#define QCA_LSUART_IIR_FIFO_STATUS_MASK		BITS(QCA_LSUART_IIR_FIFO_STATUS_SHIFT, 2)

/* FCR register (FIFO control) */
#define QCA_LSUART_FCR_FIFO_EN_SHIFT		0
#define QCA_LSUART_FCR_EDDSI_MASK		BIT(QCA_LSUART_FCR_FIFO_EN_SHIFT)
#define QCA_LSUART_FCR_RCVR_FIFO_RST_SHIFT	1
#define QCA_LSUART_FCR_RCVR_FIFO_RST_MASK	BIT(QCA_LSUART_FCR_RCVR_FIFO_RST_SHIFT)
#define QCA_LSUART_FCR_XMIT_FIFO_RST_SHIFT	2
#define QCA_LSUART_FCR_XMIT_FIFO_RST_MASK	BIT(QCA_LSUART_FCR_XMIT_FIFO_RST_SHIFT)
#define QCA_LSUART_FCR_DMA_MODE_SHIFT		3
#define QCA_LSUART_FCR_DMA_MODE_MASK		BIT(QCA_LSUART_FCR_DMA_MODE_SHIFT)
#define QCA_LSUART_FCR_RCVR_TRIG_SHIFT		6
#define QCA_LSUART_FCR_RCVR_TRIG_MASK		BITS(QCA_LSUART_FCR_RCVR_TRIG_SHIFT, 2)

/* LCR register (Line control) */
#define QCA_LSUART_LCR_CLS_SHIFT	0
#define QCA_LSUART_LCR_CLS_MASK		BITS(QCA_LSUART_LCR_CLS_SHIFT, 2)
#define QCA_LSUART_LCR_CLS_5BIT_VAL	0x0
#define QCA_LSUART_LCR_CLS_6BIT_VAL	0x1
#define QCA_LSUART_LCR_CLS_7BIT_VAL	0x2
#define QCA_LSUART_LCR_CLS_8BIT_VAL	0x3
#define QCA_LSUART_LCR_STOP_SHIFT	2
#define QCA_LSUART_LCR_STOP_MASK	BIT(QCA_LSUART_LCR_STOP_SHIFT)
#define QCA_LSUART_LCR_PEN_SHIFT	3
#define QCA_LSUART_LCR_PEN_MASK		BIT(QCA_LSUART_LCR_PEN_SHIFT)
#define QCA_LSUART_LCR_EPS_SHIFT	4
#define QCA_LSUART_LCR_EPS_MASK		BIT(QCA_LSUART_LCR_EPS_SHIFT)
#define QCA_LSUART_LCR_BREAK_SHIFT	6
#define QCA_LSUART_LCR_BREAK_MASK	BIT(QCA_LSUART_LCR_BREAK_SHIFT)
#define QCA_LSUART_LCR_DLAB_SHIFT	7
#define QCA_LSUART_LCR_DLAB_MASK	BIT(QCA_LSUART_LCR_DLAB_SHIFT)

/* MCR register (Modem control) */
#define QCA_LSUART_MCR_DTR_SHIFT	0
#define QCA_LSUART_MCR_DTR_MASK		BIT(QCA_LSUART_MCR_DTR_SHIFT)
#define QCA_LSUART_MCR_RTS_SHIFT	1
#define QCA_LSUART_MCR_RTS_MASK		BIT(QCA_LSUART_MCR_RTS_SHIFT)
#define QCA_LSUART_MCR_OUT1_SHIFT	2
#define QCA_LSUART_MCR_OUT1_MASK	BIT(QCA_LSUART_MCR_OUT1_SHIFT)
#define QCA_LSUART_MCR_OUT2_SHIFT	3
#define QCA_LSUART_MCR_OUT2_MASK	BIT(QCA_LSUART_MCR_OUT2_SHIFT)
#define QCA_LSUART_MCR_LOOPBACK_SHIFT	5
#define QCA_LSUART_MCR_LOOPBACK_MASK	BIT(QCA_LSUART_MCR_LOOPBACK_SHIFT)

/* LSR register (Line status) */
#define QCA_LSUART_LSR_DR_SHIFT		0
#define QCA_LSUART_LSR_DR_MASK		BIT(QCA_LSUART_LSR_DR_SHIFT)
#define QCA_LSUART_LSR_OE_SHIFT		1
#define QCA_LSUART_LSR_OE_MASK		BIT(QCA_LSUART_LSR_OE_SHIFT)
#define QCA_LSUART_LSR_PE_SHIFT		2
#define QCA_LSUART_LSR_PE_MASK		BIT(QCA_LSUART_LSR_PE_SHIFT)
#define QCA_LSUART_LSR_FE_SHIFT		3
#define QCA_LSUART_LSR_FE_MASK		BIT(QCA_LSUART_LSR_FE_SHIFT)
#define QCA_LSUART_LSR_BI_SHIFT		4
#define QCA_LSUART_LSR_BI_MASK		BIT(QCA_LSUART_LSR_BI_SHIFT)
#define QCA_LSUART_LSR_THRE_SHIFT	5
#define QCA_LSUART_LSR_THRE_MASK	BIT(QCA_LSUART_LSR_THRE_SHIFT)
#define QCA_LSUART_LSR_TEMT_SHIFT	6
#define QCA_LSUART_LSR_TEMT_MASK	BIT(QCA_LSUART_LSR_TEMT_SHIFT)
#define QCA_LSUART_LSR_FERR_SHIFT	7
#define QCA_LSUART_LSR_FERR_MASK	BIT(QCA_LSUART_LSR_FERR_SHIFT)

/* MCR register (Modem status) */
#define QCA_LSUART_MCR_DCTS_SHIFT	0
#define QCA_LSUART_MCR_DCTS_MASK	BIT(QCA_LSUART_MCR_DCTS_SHIFT)
#define QCA_LSUART_MCR_DDSR_SHIFT	1
#define QCA_LSUART_MCR_DDSR_MASK	BIT(QCA_LSUART_MCR_DDSR_SHIFT)
#define QCA_LSUART_MCR_TERI_SHIFT	2
#define QCA_LSUART_MCR_TERI_MASK	BIT(QCA_LSUART_MCR_TERI_SHIFT)
#define QCA_LSUART_MCR_DDCD_SHIFT	3
#define QCA_LSUART_MCR_DDCD_MASK	BIT(QCA_LSUART_MCR_DDCD_SHIFT)
#define QCA_LSUART_MCR_CTS_SHIFT	4
#define QCA_LSUART_MCR_CTS_MASK		BIT(QCA_LSUART_MCR_CTS_SHIFT)
#define QCA_LSUART_MCR_DSR_SHIFT	5
#define QCA_LSUART_MCR_DSR_MASK		BIT(QCA_LSUART_MCR_DSR_SHIFT)
#define QCA_LSUART_MCR_RI_SHIFT		6
#define QCA_LSUART_MCR_RI_MASK		BIT(QCA_LSUART_MCR_RI_SHIFT)
#define QCA_LSUART_MCR_DCD_SHIFT	7
#define QCA_LSUART_MCR_DCD_MASK		BIT(QCA_LSUART_MCR_DCD_SHIFT)

void qca953x_lsuart_init(void);
void qca953x_lsuart_putc(const char c);
void qca953x_lsuart_puts(const char *s);
int qca953x_lsuart_tstc(void);
int qca953x_lsuart_getc(void);

int soc_console_init(void);

#endif /* _SOC_COMMON_H_ */
